# This file is automatically generated by Keystone, do not modify it manually.
# Modify your Keystone config when you want to change this.

type User {
  id: ID!
  name: String
  email: String
  oauthProvider: UserOauthProviderType
  oauthProfileId: String
  password: PasswordState
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  productsCount(where: ProductWhereInput! = {}): Int
}

enum UserOauthProviderType {
  google
  instagram
}

type PasswordState {
  isSet: Boolean!
}

input UserWhereUniqueInput {
  id: ID
  email: String
}

input UserWhereInput {
  AND: [UserWhereInput!]
  OR: [UserWhereInput!]
  NOT: [UserWhereInput!]
  id: IDFilter
  name: StringFilter
  email: StringFilter
  oauthProvider: UserOauthProviderTypeNullableFilter
  oauthProfileId: StringFilter
  posts: PostManyRelationFilter
  products: ProductManyRelationFilter
}

input IDFilter {
  equals: ID
  in: [ID!]
  notIn: [ID!]
  lt: ID
  lte: ID
  gt: ID
  gte: ID
  not: IDFilter
}

input StringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringFilter
}

enum QueryMode {
  default
  insensitive
}

input NestedStringFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringFilter
}

input UserOauthProviderTypeNullableFilter {
  equals: UserOauthProviderType
  in: [UserOauthProviderType!]
  notIn: [UserOauthProviderType!]
  not: UserOauthProviderTypeNullableFilter
}

input PostManyRelationFilter {
  every: PostWhereInput
  some: PostWhereInput
  none: PostWhereInput
}

input ProductManyRelationFilter {
  every: ProductWhereInput
  some: ProductWhereInput
  none: ProductWhereInput
}

input UserOrderByInput {
  id: OrderDirection
  name: OrderDirection
  email: OrderDirection
  oauthProvider: OrderDirection
  oauthProfileId: OrderDirection
}

enum OrderDirection {
  asc
  desc
}

input UserUpdateInput {
  name: String
  email: String
  oauthProvider: UserOauthProviderType
  oauthProfileId: String
  password: String
  posts: PostRelateToManyForUpdateInput
  products: ProductRelateToManyForUpdateInput
}

input PostRelateToManyForUpdateInput {
  disconnect: [PostWhereUniqueInput!]
  set: [PostWhereUniqueInput!]
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input ProductRelateToManyForUpdateInput {
  disconnect: [ProductWhereUniqueInput!]
  set: [ProductWhereUniqueInput!]
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

input UserUpdateArgs {
  where: UserWhereUniqueInput!
  data: UserUpdateInput!
}

input UserCreateInput {
  name: String
  email: String
  oauthProvider: UserOauthProviderType
  oauthProfileId: String
  password: String
  posts: PostRelateToManyForCreateInput
  products: ProductRelateToManyForCreateInput
}

input PostRelateToManyForCreateInput {
  create: [PostCreateInput!]
  connect: [PostWhereUniqueInput!]
}

input ProductRelateToManyForCreateInput {
  create: [ProductCreateInput!]
  connect: [ProductWhereUniqueInput!]
}

type Post {
  id: ID!
  title: String
  status: String
  content: Post_content_Document
  publishDate: DateTime
  author: User
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tagsCount(where: TagWhereInput! = {}): Int
}

type Post_content_Document {
  document(hydrateRelationships: Boolean! = false): JSON!
}

scalar DateTime
  @specifiedBy(url: "https://datatracker.ietf.org/doc/html/rfc3339#section-5.6")

input PostWhereUniqueInput {
  id: ID
}

input PostWhereInput {
  AND: [PostWhereInput!]
  OR: [PostWhereInput!]
  NOT: [PostWhereInput!]
  id: IDFilter
  title: StringFilter
  status: StringNullableFilter
  publishDate: DateTimeNullableFilter
  author: UserWhereInput
  tags: TagManyRelationFilter
}

input StringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  mode: QueryMode
  not: NestedStringNullableFilter
}

input NestedStringNullableFilter {
  equals: String
  in: [String!]
  notIn: [String!]
  lt: String
  lte: String
  gt: String
  gte: String
  contains: String
  startsWith: String
  endsWith: String
  not: NestedStringNullableFilter
}

input DateTimeNullableFilter {
  equals: DateTime
  in: [DateTime!]
  notIn: [DateTime!]
  lt: DateTime
  lte: DateTime
  gt: DateTime
  gte: DateTime
  not: DateTimeNullableFilter
}

input TagManyRelationFilter {
  every: TagWhereInput
  some: TagWhereInput
  none: TagWhereInput
}

input PostOrderByInput {
  id: OrderDirection
  title: OrderDirection
  status: OrderDirection
  publishDate: OrderDirection
}

input PostUpdateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForUpdateInput
  tags: TagRelateToManyForUpdateInput
}

input UserRelateToOneForUpdateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
  disconnect: Boolean
}

input TagRelateToManyForUpdateInput {
  disconnect: [TagWhereUniqueInput!]
  set: [TagWhereUniqueInput!]
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

input PostUpdateArgs {
  where: PostWhereUniqueInput!
  data: PostUpdateInput!
}

input PostCreateInput {
  title: String
  status: String
  content: JSON
  publishDate: DateTime
  author: UserRelateToOneForCreateInput
  tags: TagRelateToManyForCreateInput
}

input UserRelateToOneForCreateInput {
  create: UserCreateInput
  connect: UserWhereUniqueInput
}

input TagRelateToManyForCreateInput {
  create: [TagCreateInput!]
  connect: [TagWhereUniqueInput!]
}

type Product {
  id: ID!
  name: String
  description: String
  photo(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  photoCount(where: ProductImageWhereInput! = {}): Int
  status: String
  user: User
  skus(
    where: SKUWhereInput! = {}
    orderBy: [SKUOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SKU!]
  skusCount(where: SKUWhereInput! = {}): Int
  skuValues(
    where: SKUValueWhereInput! = {}
    orderBy: [SKUValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SKUValue!]
  skuValuesCount(where: SKUValueWhereInput! = {}): Int
  options(
    where: OptionWhereInput! = {}
    orderBy: [OptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Option!]
  optionsCount(where: OptionWhereInput! = {}): Int
  optionValues(
    where: OptionValueWhereInput! = {}
    orderBy: [OptionValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OptionValue!]
  optionValuesCount(where: OptionValueWhereInput! = {}): Int
  category: Category
}

input ProductWhereUniqueInput {
  id: ID
}

input ProductWhereInput {
  AND: [ProductWhereInput!]
  OR: [ProductWhereInput!]
  NOT: [ProductWhereInput!]
  id: IDFilter
  name: StringFilter
  description: StringFilter
  photo: ProductImageManyRelationFilter
  status: StringNullableFilter
  user: UserWhereInput
  skus: SKUManyRelationFilter
  skuValues: SKUValueManyRelationFilter
  options: OptionManyRelationFilter
  optionValues: OptionValueManyRelationFilter
  category: CategoryWhereInput
}

input ProductImageManyRelationFilter {
  every: ProductImageWhereInput
  some: ProductImageWhereInput
  none: ProductImageWhereInput
}

input SKUManyRelationFilter {
  every: SKUWhereInput
  some: SKUWhereInput
  none: SKUWhereInput
}

input SKUValueManyRelationFilter {
  every: SKUValueWhereInput
  some: SKUValueWhereInput
  none: SKUValueWhereInput
}

input OptionManyRelationFilter {
  every: OptionWhereInput
  some: OptionWhereInput
  none: OptionWhereInput
}

input OptionValueManyRelationFilter {
  every: OptionValueWhereInput
  some: OptionValueWhereInput
  none: OptionValueWhereInput
}

input ProductOrderByInput {
  id: OrderDirection
  name: OrderDirection
  description: OrderDirection
  status: OrderDirection
}

input ProductUpdateInput {
  name: String
  description: String
  photo: ProductImageRelateToManyForUpdateInput
  status: String
  user: UserRelateToOneForUpdateInput
  skus: SKURelateToManyForUpdateInput
  skuValues: SKUValueRelateToManyForUpdateInput
  options: OptionRelateToManyForUpdateInput
  optionValues: OptionValueRelateToManyForUpdateInput
  category: CategoryRelateToOneForUpdateInput
}

input ProductImageRelateToManyForUpdateInput {
  disconnect: [ProductImageWhereUniqueInput!]
  set: [ProductImageWhereUniqueInput!]
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input SKURelateToManyForUpdateInput {
  disconnect: [SKUWhereUniqueInput!]
  set: [SKUWhereUniqueInput!]
  create: [SKUCreateInput!]
  connect: [SKUWhereUniqueInput!]
}

input SKUValueRelateToManyForUpdateInput {
  disconnect: [SKUValueWhereUniqueInput!]
  set: [SKUValueWhereUniqueInput!]
  create: [SKUValueCreateInput!]
  connect: [SKUValueWhereUniqueInput!]
}

input OptionRelateToManyForUpdateInput {
  disconnect: [OptionWhereUniqueInput!]
  set: [OptionWhereUniqueInput!]
  create: [OptionCreateInput!]
  connect: [OptionWhereUniqueInput!]
}

input OptionValueRelateToManyForUpdateInput {
  disconnect: [OptionValueWhereUniqueInput!]
  set: [OptionValueWhereUniqueInput!]
  create: [OptionValueCreateInput!]
  connect: [OptionValueWhereUniqueInput!]
}

input CategoryRelateToOneForUpdateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
  disconnect: Boolean
}

input ProductUpdateArgs {
  where: ProductWhereUniqueInput!
  data: ProductUpdateInput!
}

input ProductCreateInput {
  name: String
  description: String
  photo: ProductImageRelateToManyForCreateInput
  status: String
  user: UserRelateToOneForCreateInput
  skus: SKURelateToManyForCreateInput
  skuValues: SKUValueRelateToManyForCreateInput
  options: OptionRelateToManyForCreateInput
  optionValues: OptionValueRelateToManyForCreateInput
  category: CategoryRelateToOneForCreateInput
}

input ProductImageRelateToManyForCreateInput {
  create: [ProductImageCreateInput!]
  connect: [ProductImageWhereUniqueInput!]
}

input SKURelateToManyForCreateInput {
  create: [SKUCreateInput!]
  connect: [SKUWhereUniqueInput!]
}

input SKUValueRelateToManyForCreateInput {
  create: [SKUValueCreateInput!]
  connect: [SKUValueWhereUniqueInput!]
}

input OptionRelateToManyForCreateInput {
  create: [OptionCreateInput!]
  connect: [OptionWhereUniqueInput!]
}

input OptionValueRelateToManyForCreateInput {
  create: [OptionValueCreateInput!]
  connect: [OptionValueWhereUniqueInput!]
}

input CategoryRelateToOneForCreateInput {
  create: CategoryCreateInput
  connect: CategoryWhereUniqueInput
}

type ProductImage {
  id: ID!
  image: CloudinaryImage_File
  altText: String
  product: Product
  option: Option
  optionValue: OptionValue
}

type CloudinaryImage_File {
  id: ID
  filename: String
  originalFilename: String
  mimetype: String
  encoding: String
  publicUrl: String
  publicUrlTransformed(transformation: CloudinaryImageFormat): String
}

"""
Mirrors the formatting options [Cloudinary provides](https://cloudinary.com/documentation/image_transformation_reference).
All options are strings as they ultimately end up in a URL.
"""
input CloudinaryImageFormat {
  """
   Rewrites the filename to be this pretty string. Do not include `/` or `.`
  """
  prettyName: String
  width: String
  height: String
  crop: String
  aspect_ratio: String
  gravity: String
  zoom: String
  x: String
  y: String
  format: String
  fetch_format: String
  quality: String
  radius: String
  angle: String
  effect: String
  opacity: String
  border: String
  background: String
  overlay: String
  underlay: String
  default_image: String
  delay: String
  color: String
  color_space: String
  dpr: String
  page: String
  density: String
  flags: String
  transformation: String
}

input ProductImageWhereUniqueInput {
  id: ID
}

input ProductImageWhereInput {
  AND: [ProductImageWhereInput!]
  OR: [ProductImageWhereInput!]
  NOT: [ProductImageWhereInput!]
  id: IDFilter
  altText: StringFilter
  product: ProductWhereInput
  option: OptionWhereInput
  optionValue: OptionValueWhereInput
}

input ProductImageOrderByInput {
  id: OrderDirection
  altText: OrderDirection
}

input ProductImageUpdateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneForUpdateInput
  option: OptionRelateToOneForUpdateInput
  optionValue: OptionValueRelateToOneForUpdateInput
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

input ProductRelateToOneForUpdateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
  disconnect: Boolean
}

input OptionRelateToOneForUpdateInput {
  create: OptionCreateInput
  connect: OptionWhereUniqueInput
  disconnect: Boolean
}

input OptionValueRelateToOneForUpdateInput {
  create: OptionValueCreateInput
  connect: OptionValueWhereUniqueInput
  disconnect: Boolean
}

input ProductImageUpdateArgs {
  where: ProductImageWhereUniqueInput!
  data: ProductImageUpdateInput!
}

input ProductImageCreateInput {
  image: Upload
  altText: String
  product: ProductRelateToOneForCreateInput
  option: OptionRelateToOneForCreateInput
  optionValue: OptionValueRelateToOneForCreateInput
}

input ProductRelateToOneForCreateInput {
  create: ProductCreateInput
  connect: ProductWhereUniqueInput
}

input OptionRelateToOneForCreateInput {
  create: OptionCreateInput
  connect: OptionWhereUniqueInput
}

input OptionValueRelateToOneForCreateInput {
  create: OptionValueCreateInput
  connect: OptionValueWhereUniqueInput
}

type Tag {
  id: ID!
  name: String
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  postsCount(where: PostWhereInput! = {}): Int
}

input TagWhereUniqueInput {
  id: ID
}

input TagWhereInput {
  AND: [TagWhereInput!]
  OR: [TagWhereInput!]
  NOT: [TagWhereInput!]
  id: IDFilter
  name: StringFilter
  posts: PostManyRelationFilter
}

input TagOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input TagUpdateInput {
  name: String
  posts: PostRelateToManyForUpdateInput
}

input TagUpdateArgs {
  where: TagWhereUniqueInput!
  data: TagUpdateInput!
}

input TagCreateInput {
  name: String
  posts: PostRelateToManyForCreateInput
}

type Category {
  id: ID!
  name: String
}

input CategoryWhereUniqueInput {
  id: ID
}

input CategoryWhereInput {
  AND: [CategoryWhereInput!]
  OR: [CategoryWhereInput!]
  NOT: [CategoryWhereInput!]
  id: IDFilter
  name: StringFilter
}

input CategoryOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input CategoryUpdateInput {
  name: String
}

input CategoryUpdateArgs {
  where: CategoryWhereUniqueInput!
  data: CategoryUpdateInput!
}

input CategoryCreateInput {
  name: String
}

type SKU {
  id: ID!
  sku: String
  product: Product
  stock: Int
}

input SKUWhereUniqueInput {
  id: ID
  sku: String
}

input SKUWhereInput {
  AND: [SKUWhereInput!]
  OR: [SKUWhereInput!]
  NOT: [SKUWhereInput!]
  id: IDFilter
  sku: StringFilter
  product: ProductWhereInput
  stock: IntNullableFilter
}

input IntNullableFilter {
  equals: Int
  in: [Int!]
  notIn: [Int!]
  lt: Int
  lte: Int
  gt: Int
  gte: Int
  not: IntNullableFilter
}

input SKUOrderByInput {
  id: OrderDirection
  sku: OrderDirection
  stock: OrderDirection
}

input SKUUpdateInput {
  sku: String
  product: ProductRelateToOneForUpdateInput
  stock: Int
}

input SKUUpdateArgs {
  where: SKUWhereUniqueInput!
  data: SKUUpdateInput!
}

input SKUCreateInput {
  sku: String
  product: ProductRelateToOneForCreateInput
  stock: Int
}

type SKUValue {
  id: ID!
  product: Product
  SKU: SKU
  options(
    where: OptionWhereInput! = {}
    orderBy: [OptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Option!]
  optionsCount(where: OptionWhereInput! = {}): Int
  optionValues(
    where: OptionValueWhereInput! = {}
    orderBy: [OptionValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OptionValue!]
  optionValuesCount(where: OptionValueWhereInput! = {}): Int
}

input SKUValueWhereUniqueInput {
  id: ID
}

input SKUValueWhereInput {
  AND: [SKUValueWhereInput!]
  OR: [SKUValueWhereInput!]
  NOT: [SKUValueWhereInput!]
  id: IDFilter
  product: ProductWhereInput
  SKU: SKUWhereInput
  options: OptionManyRelationFilter
  optionValues: OptionValueManyRelationFilter
}

input SKUValueOrderByInput {
  id: OrderDirection
}

input SKUValueUpdateInput {
  product: ProductRelateToOneForUpdateInput
  SKU: SKURelateToOneForUpdateInput
  options: OptionRelateToManyForUpdateInput
  optionValues: OptionValueRelateToManyForUpdateInput
}

input SKURelateToOneForUpdateInput {
  create: SKUCreateInput
  connect: SKUWhereUniqueInput
  disconnect: Boolean
}

input SKUValueUpdateArgs {
  where: SKUValueWhereUniqueInput!
  data: SKUValueUpdateInput!
}

input SKUValueCreateInput {
  product: ProductRelateToOneForCreateInput
  SKU: SKURelateToOneForCreateInput
  options: OptionRelateToManyForCreateInput
  optionValues: OptionValueRelateToManyForCreateInput
}

input SKURelateToOneForCreateInput {
  create: SKUCreateInput
  connect: SKUWhereUniqueInput
}

type Option {
  id: ID!
  name: String
  product: Product
}

input OptionWhereUniqueInput {
  id: ID
  name: String
}

input OptionWhereInput {
  AND: [OptionWhereInput!]
  OR: [OptionWhereInput!]
  NOT: [OptionWhereInput!]
  id: IDFilter
  name: StringFilter
  product: ProductWhereInput
}

input OptionOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input OptionUpdateInput {
  name: String
  product: ProductRelateToOneForUpdateInput
}

input OptionUpdateArgs {
  where: OptionWhereUniqueInput!
  data: OptionUpdateInput!
}

input OptionCreateInput {
  name: String
  product: ProductRelateToOneForCreateInput
}

type OptionValue {
  id: ID!
  name: String
  product: Product
  option: Option
}

input OptionValueWhereUniqueInput {
  id: ID
  name: String
}

input OptionValueWhereInput {
  AND: [OptionValueWhereInput!]
  OR: [OptionValueWhereInput!]
  NOT: [OptionValueWhereInput!]
  id: IDFilter
  name: StringFilter
  product: ProductWhereInput
  option: OptionWhereInput
}

input OptionValueOrderByInput {
  id: OrderDirection
  name: OrderDirection
}

input OptionValueUpdateInput {
  name: String
  product: ProductRelateToOneForUpdateInput
  option: OptionRelateToOneForUpdateInput
}

input OptionValueUpdateArgs {
  where: OptionValueWhereUniqueInput!
  data: OptionValueUpdateInput!
}

input OptionValueCreateInput {
  name: String
  product: ProductRelateToOneForCreateInput
  option: OptionRelateToOneForCreateInput
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Mutation {
  createUser(data: UserCreateInput!): User
  createUsers(data: [UserCreateInput!]!): [User]
  updateUser(where: UserWhereUniqueInput!, data: UserUpdateInput!): User
  updateUsers(data: [UserUpdateArgs!]!): [User]
  deleteUser(where: UserWhereUniqueInput!): User
  deleteUsers(where: [UserWhereUniqueInput!]!): [User]
  createPost(data: PostCreateInput!): Post
  createPosts(data: [PostCreateInput!]!): [Post]
  updatePost(where: PostWhereUniqueInput!, data: PostUpdateInput!): Post
  updatePosts(data: [PostUpdateArgs!]!): [Post]
  deletePost(where: PostWhereUniqueInput!): Post
  deletePosts(where: [PostWhereUniqueInput!]!): [Post]
  createProduct(data: ProductCreateInput!): Product
  createProducts(data: [ProductCreateInput!]!): [Product]
  updateProduct(
    where: ProductWhereUniqueInput!
    data: ProductUpdateInput!
  ): Product
  updateProducts(data: [ProductUpdateArgs!]!): [Product]
  deleteProduct(where: ProductWhereUniqueInput!): Product
  deleteProducts(where: [ProductWhereUniqueInput!]!): [Product]
  createProductImage(data: ProductImageCreateInput!): ProductImage
  createProductImages(data: [ProductImageCreateInput!]!): [ProductImage]
  updateProductImage(
    where: ProductImageWhereUniqueInput!
    data: ProductImageUpdateInput!
  ): ProductImage
  updateProductImages(data: [ProductImageUpdateArgs!]!): [ProductImage]
  deleteProductImage(where: ProductImageWhereUniqueInput!): ProductImage
  deleteProductImages(where: [ProductImageWhereUniqueInput!]!): [ProductImage]
  createTag(data: TagCreateInput!): Tag
  createTags(data: [TagCreateInput!]!): [Tag]
  updateTag(where: TagWhereUniqueInput!, data: TagUpdateInput!): Tag
  updateTags(data: [TagUpdateArgs!]!): [Tag]
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTags(where: [TagWhereUniqueInput!]!): [Tag]
  createCategory(data: CategoryCreateInput!): Category
  createCategories(data: [CategoryCreateInput!]!): [Category]
  updateCategory(
    where: CategoryWhereUniqueInput!
    data: CategoryUpdateInput!
  ): Category
  updateCategories(data: [CategoryUpdateArgs!]!): [Category]
  deleteCategory(where: CategoryWhereUniqueInput!): Category
  deleteCategories(where: [CategoryWhereUniqueInput!]!): [Category]
  createSKU(data: SKUCreateInput!): SKU
  createSKUS(data: [SKUCreateInput!]!): [SKU]
  updateSKU(where: SKUWhereUniqueInput!, data: SKUUpdateInput!): SKU
  updateSKUS(data: [SKUUpdateArgs!]!): [SKU]
  deleteSKU(where: SKUWhereUniqueInput!): SKU
  deleteSKUS(where: [SKUWhereUniqueInput!]!): [SKU]
  createSKUValue(data: SKUValueCreateInput!): SKUValue
  createSKUValues(data: [SKUValueCreateInput!]!): [SKUValue]
  updateSKUValue(
    where: SKUValueWhereUniqueInput!
    data: SKUValueUpdateInput!
  ): SKUValue
  updateSKUValues(data: [SKUValueUpdateArgs!]!): [SKUValue]
  deleteSKUValue(where: SKUValueWhereUniqueInput!): SKUValue
  deleteSKUValues(where: [SKUValueWhereUniqueInput!]!): [SKUValue]
  createOption(data: OptionCreateInput!): Option
  createOptions(data: [OptionCreateInput!]!): [Option]
  updateOption(where: OptionWhereUniqueInput!, data: OptionUpdateInput!): Option
  updateOptions(data: [OptionUpdateArgs!]!): [Option]
  deleteOption(where: OptionWhereUniqueInput!): Option
  deleteOptions(where: [OptionWhereUniqueInput!]!): [Option]
  createOptionValue(data: OptionValueCreateInput!): OptionValue
  createOptionValues(data: [OptionValueCreateInput!]!): [OptionValue]
  updateOptionValue(
    where: OptionValueWhereUniqueInput!
    data: OptionValueUpdateInput!
  ): OptionValue
  updateOptionValues(data: [OptionValueUpdateArgs!]!): [OptionValue]
  deleteOptionValue(where: OptionValueWhereUniqueInput!): OptionValue
  deleteOptionValues(where: [OptionValueWhereUniqueInput!]!): [OptionValue]
  endSession: Boolean!
  authenticateUserWithPassword(
    email: String!
    password: String!
  ): UserAuthenticationWithPasswordResult
  createInitialUser(
    data: CreateInitialUserInput!
  ): UserAuthenticationWithPasswordSuccess!
}

union UserAuthenticationWithPasswordResult =
    UserAuthenticationWithPasswordSuccess
  | UserAuthenticationWithPasswordFailure

type UserAuthenticationWithPasswordSuccess {
  sessionToken: String!
  item: User!
}

type UserAuthenticationWithPasswordFailure {
  message: String!
}

input CreateInitialUserInput {
  email: String
  password: String
}

type Query {
  users(
    where: UserWhereInput! = {}
    orderBy: [UserOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [User!]
  user(where: UserWhereUniqueInput!): User
  usersCount(where: UserWhereInput! = {}): Int
  posts(
    where: PostWhereInput! = {}
    orderBy: [PostOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Post!]
  post(where: PostWhereUniqueInput!): Post
  postsCount(where: PostWhereInput! = {}): Int
  products(
    where: ProductWhereInput! = {}
    orderBy: [ProductOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Product!]
  product(where: ProductWhereUniqueInput!): Product
  productsCount(where: ProductWhereInput! = {}): Int
  productImages(
    where: ProductImageWhereInput! = {}
    orderBy: [ProductImageOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [ProductImage!]
  productImage(where: ProductImageWhereUniqueInput!): ProductImage
  productImagesCount(where: ProductImageWhereInput! = {}): Int
  tags(
    where: TagWhereInput! = {}
    orderBy: [TagOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Tag!]
  tag(where: TagWhereUniqueInput!): Tag
  tagsCount(where: TagWhereInput! = {}): Int
  categories(
    where: CategoryWhereInput! = {}
    orderBy: [CategoryOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Category!]
  category(where: CategoryWhereUniqueInput!): Category
  categoriesCount(where: CategoryWhereInput! = {}): Int
  sKUS(
    where: SKUWhereInput! = {}
    orderBy: [SKUOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SKU!]
  sKU(where: SKUWhereUniqueInput!): SKU
  sKUSCount(where: SKUWhereInput! = {}): Int
  sKUValues(
    where: SKUValueWhereInput! = {}
    orderBy: [SKUValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [SKUValue!]
  sKUValue(where: SKUValueWhereUniqueInput!): SKUValue
  sKUValuesCount(where: SKUValueWhereInput! = {}): Int
  options(
    where: OptionWhereInput! = {}
    orderBy: [OptionOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [Option!]
  option(where: OptionWhereUniqueInput!): Option
  optionsCount(where: OptionWhereInput! = {}): Int
  optionValues(
    where: OptionValueWhereInput! = {}
    orderBy: [OptionValueOrderByInput!]! = []
    take: Int
    skip: Int! = 0
  ): [OptionValue!]
  optionValue(where: OptionValueWhereUniqueInput!): OptionValue
  optionValuesCount(where: OptionValueWhereInput! = {}): Int
  keystone: KeystoneMeta!
  authenticatedItem: AuthenticatedItem
}

union AuthenticatedItem = User

type KeystoneMeta {
  adminMeta: KeystoneAdminMeta!
}

type KeystoneAdminMeta {
  enableSignout: Boolean!
  enableSessionItem: Boolean!
  lists: [KeystoneAdminUIListMeta!]!
  list(key: String!): KeystoneAdminUIListMeta
}

type KeystoneAdminUIListMeta {
  key: String!
  itemQueryName: String!
  listQueryName: String!
  hideCreate: Boolean!
  hideDelete: Boolean!
  path: String!
  label: String!
  singular: String!
  plural: String!
  description: String
  initialColumns: [String!]!
  pageSize: Int!
  labelField: String!
  fields: [KeystoneAdminUIFieldMeta!]!
  initialSort: KeystoneAdminUISort
  isHidden: Boolean!
}

type KeystoneAdminUIFieldMeta {
  path: String!
  label: String!
  isOrderable: Boolean!
  isFilterable: Boolean!
  fieldMeta: JSON
  viewsIndex: Int!
  customViewsIndex: Int
  createView: KeystoneAdminUIFieldMetaCreateView!
  listView: KeystoneAdminUIFieldMetaListView!
  itemView(id: ID): KeystoneAdminUIFieldMetaItemView
  search: QueryMode
}

type KeystoneAdminUIFieldMetaCreateView {
  fieldMode: KeystoneAdminUIFieldMetaCreateViewFieldMode!
}

enum KeystoneAdminUIFieldMetaCreateViewFieldMode {
  edit
  hidden
}

type KeystoneAdminUIFieldMetaListView {
  fieldMode: KeystoneAdminUIFieldMetaListViewFieldMode!
}

enum KeystoneAdminUIFieldMetaListViewFieldMode {
  read
  hidden
}

type KeystoneAdminUIFieldMetaItemView {
  fieldMode: KeystoneAdminUIFieldMetaItemViewFieldMode
}

enum KeystoneAdminUIFieldMetaItemViewFieldMode {
  edit
  read
  hidden
}

type KeystoneAdminUISort {
  field: String!
  direction: KeystoneAdminUISortDirection!
}

enum KeystoneAdminUISortDirection {
  ASC
  DESC
}
